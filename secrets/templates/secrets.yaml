{{- $labels := include "secrets.labels" . -}}
{{- $namespace := .Release.Namespace -}}
{{- range $secretName, $secretConfig := required "No secrets specified - please consult readme and provide suitable data!" .Values.secrets }}
{{- $data := dict }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
{{- if $secretConfig.namespace }}
  namespace: {{ $secretConfig.namespace }}
  {{- $_ := set $data "namespace" $secretConfig.namespace -}}
{{- else }}
  {{- $_ := set $data "namespace" $namespace -}}
{{- end }}
  labels:
    {{- $labels | nindent 4 }}
    {{- with $secretConfig.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with $secretConfig.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- if (ne $secretConfig.keep false ) }}
    "helm.sh/resource-policy": "keep"
    {{- end }}
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" $data.namespace $secretName) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- range $k, $v := $secretData }}
   {{- $_ := set $secretData $k ($v | b64dec) -}}
  {{- end }}
  {{- range $key, $secretEntryConfig := required "No secrets specified for $secretName ($secretName.values missing or empty!) - please consult readme and provide suitable data!" $secretConfig.values }}
  {{- if eq $secretEntryConfig.regenerate true }}
   {{- $_ := unset $secretData $key -}}
  {{- end }}
  {{ $length := int (coalesce $secretEntryConfig.length 16) }}
  {{- if or (eq $secretEntryConfig.mode "static") (eq $secretEntryConfig.mode nil) }}
  {{- /* set $key from required .value */ -}}
  {{ $key }}: {{ (required "No value given!" $secretEntryConfig.value ) | b64enc }}
  {{- else if eq $secretEntryConfig.mode "ascii" }}
  {{- /* set $key either from existing secret data or generate a random one when not exists */ -}}
  {{ $key }}: {{ (coalesce (get $secretData $key) | default (randAscii $length)) | b64enc }}
  {{- else if eq $secretEntryConfig.mode "alnum" }}
  {{- /* set $key either from existing secret data or generate a random one when not exists */ -}}
  {{ $key }}: {{ (coalesce (get $secretData $key) | default (randAlphaNum $length)) | b64enc }}
  {{- else if eq $secretEntryConfig.mode "alpha" }}
  {{- /* set $key either from existing secret data or generate a random one when not exists */ -}}
  {{ $key }}: {{ (coalesce (get $secretData $key) | default (randAlpha $length)) | b64enc }}
  {{- else if eq $secretEntryConfig.mode "num" }}
  {{- /* set $key either from existing secret data or generate a random one when not exists */ -}}
  {{ $key }}: {{ (coalesce (get $secretData $key) | default (randNumeric $length)) | b64enc }}
  {{- else }}
   {{ required "Invalid mode specified for {{ $key }}" $secretData.noValueThere }}
  {{- end }}
  {{- end }}{{- /* secret range */}}
{{- end }}{{- /* global range */}}